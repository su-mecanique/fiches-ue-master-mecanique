#!/usr/bin/env python3

import requests
import os
import xml.etree.ElementTree as ET
import sys

from pathlib import Path
from hashlib import sha1

ENDPOINT = os.getenv("DROPSU_ENDPOINT")
user = os.getenv("DROPSU_USER")
passwd = os.getenv("DROPSU_PASS")
folder = os.getenv("DROPSU_FOLDER")

# Remove trailing /
if ENDPOINT[-1] == '/':
    ENDPOINT = ENDPOINT[:-1]

variables = {user, passwd, folder}

if None in variables or "" in variables:
    print("Environment variables undefined")
    sys.exit(1)

types = {
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    "image/jpg",
    "image/jpeg",
    "image/png",
}

def should_download(response, filetypes):
    for propstat in response.iter("{DAV:}propstat"):
        content_type = propstat.find("{DAV:}prop").find("{DAV:}getcontenttype")
        if content_type is not None:
            return content_type.text in filetypes
    return False

def get_files_list(user, passwd, folder):
    r = requests.request(
        method="PROPFIND",
        url=f"{ENDPOINT}/remote.php/dav/files/{user}/{folder}",
        auth=(user, passwd)
    )

    if not r.ok:
        raise RuntimeError(f"Files list returned HTTP code {r.status_code} ({r.reason})")

    tree = ET.fromstring(r.text)
    return [Path(response.find("{DAV:}href").text)
            for response in tree if should_download(response, types)]

def download(user, password, file, destination):
    print(f"Downloading {ENDPOINT}{file} to {destination}/{file.name}... ", end="")
    r = requests.get(f"{ENDPOINT}{file}", auth=(user, passwd))

    if not r.ok:
        raise RuntimeError(f"Files list returned HTTP code {r.status_code} ({r.reason})")

    with open(Path(destination) / file.name, 'rb+') as fh:
        sha_remote = sha1(r.content).hexdigest()
        sha_local = sha1(fh.read()).hexdigest()

        print(f"{sha_remote} {sha_local} ", end="")

        if sha_remote == "8451e35efe7632bd1888ce9ce2f4713a4f8159ad":
            print(f"❌ (remote is template)")
            return

        if sha_remote == sha_local:
            print(f"❌ (identical)")
            return

    with open(Path(destination) / file.name, 'wb') as fh:
        fh.write(r.content)
        print("✅")

wanted_xlsx = get_files_list(user, passwd, folder)

for file in wanted_xlsx:
    download(user, passwd, file, 'fiches')

if False:
    wanted_figures = get_files_list(user, passwd, folder + "/figures")
    for file in wanted_figures:
        download(user, passwd, file, 'figures')
